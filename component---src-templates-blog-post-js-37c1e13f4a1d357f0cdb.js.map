{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["Bio","data","useStaticQuery","site","siteMetadata","author","social","style","display","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","borderRadius","imgStyle","marginTop","summary","href","twitter","BlogPostTemplate","pageContext","location","post","markdownRemark","previous","next","profileImgFluid","frontmatter","profile","fluid","title","description","excerpt","scale","date","writeAuthor","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel"],"mappings":"wKAuEeA,EA1DH,WACV,IAAMC,EAAOC,yBAAe,cADZ,EAwBWD,EAAKE,KAAKC,aAA7BC,EAxBQ,EAwBRA,OAAQC,EAxBA,EAwBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,OACRC,aAAcC,YAAO,OAGvB,kBAAC,IAAD,CACEC,MAAOV,EAAKW,OAAOC,gBAAgBF,MACnCG,IAAKT,EAAOU,KACZR,MAAO,CACLS,YAAaN,YAAO,IACpBD,aAAc,EACdQ,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,uBACEX,MAAO,CACPa,UAAW,QAFb,cAGa,gCAASf,EAAOU,MAH7B,IAG6CV,EAAOgB,QAHpD,IAKE,uBAAGC,KAAI,WAAahB,EAAOiB,QAApB,UAAP,0C,wBCqBOC,UA3EU,SAAC,GAAqC,IAAnCvB,EAAkC,EAAlCA,KAAMwB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAO1B,EAAK2B,eAEVC,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,KAEZC,EAAkBJ,EAAKK,YAAYC,QAAQpB,gBAAgBqB,MAEjE,OACE,kBAAC,IAAD,CAAQR,SAAUA,EAAUS,MAAM,QAChC,kBAAC,IAAD,CACEA,MAAOR,EAAKK,YAAYG,MACxBC,YAAaT,EAAKK,YAAYI,aAAeT,EAAKU,UAEpD,iCACE,gCACE,wBACE9B,MAAO,CACLE,aAAc,IAGfkB,EAAKK,YAAYG,OAEpB,uBACE5B,MAAK,iBACA+B,aAAM,IADN,CAEH9B,QAAQ,QACRC,aAAcC,YAAO,MAGtBiB,EAAKK,YAAYO,KAPpB,OAO8BZ,EAAKK,YAAYQ,aAE/C,kBAAC,IAAD,CAAKN,MAAOH,EAAiBjB,IAAI,mBAGnC,6BAAS2B,wBAAyB,CAAEC,OAAQf,EAAKgB,QACjD,wBACEpC,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,kBAAC,EAAD,QAIJ,6BACE,wBACEH,MAAO,CACLC,QAAQ,OACRoC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGlB,GACC,kBAAC,OAAD,CAAMmB,GAAInB,EAASoB,OAAOC,KAAMC,IAAI,QAApC,KACKtB,EAASG,YAAYG,QAI9B,4BACGL,GACC,kBAAC,OAAD,CAAMkB,GAAIlB,EAAKmB,OAAOC,KAAMC,IAAI,QAC7BrB,EAAKE,YAAYG,MADpB","file":"component---src-templates-blog-post-js-37c1e13f4a1d357f0cdb.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author.name}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p\n        style={{\n        marginTop: '8px',}}>\n        Written by <strong>{author.name}</strong> {author.summary}\n        {` `}\n        <a href={`https://${social.twitter}.co.kr`}>\n          You should look around our web-site\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  // const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n  const profileImgFluid = post.frontmatter.profile.childImageSharp.fluid\n\n  return (\n    <Layout location={location} title=\"Home\">\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date} || {post.frontmatter.writeAuthor}\n          </p>\n          <Img fluid={profileImgFluid} alt=\"Profile Image\"\n          />\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        writeAuthor\n        profile {\n            childImageSharp {\n                fluid {\n                ...GatsbyImageSharpFluid\n                }\n            }\n        }\n      }\n    }\n  }\n`\n\n\n"],"sourceRoot":""}