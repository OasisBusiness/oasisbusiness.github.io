{"componentChunkName":"component---src-templates-blog-post-js","path":"/introduceGatsby/","result":{"data":{"site":{"siteMetadata":{"title":"oasisbusiness"}},"markdownRemark":{"id":"a437655e-5ccc-5670-bc4e-19ee5ecad1bc","excerpt":"안녕하세요! 오늘은 오아시스 블로그를 개설하면서 이용한 gatsby에 대해 알아보도록 하겠습니다. What is Gatsby? 페이지 생성에는 여러가지 방식이있다.  SSR 방식 페이지 접근 시 DB에서 정보를 받아와 HTML 생성 CSR 방식 API로 페이지 정보를 받아와 HTML…","html":"<p>안녕하세요!<br>\n오늘은 오아시스 블로그를 개설하면서 이용한 gatsby에 대해 알아보도록 하겠습니다.</p>\n<h2>What is Gatsby?</h2>\n<p>페이지 생성에는 여러가지 방식이있다. </p>\n<ol>\n<li>\n<p>SSR 방식</p>\n<ul>\n<li>페이지 접근 시 DB에서 정보를 받아와 HTML 생성</li>\n</ul>\n</li>\n<li>\n<p>CSR 방식</p>\n<ul>\n<li>API로 페이지 정보를 받아와 HTML 생성</li>\n</ul>\n</li>\n<li>\n<p>원하는 시점에 빌드하여 페이지 생성</p>\n<ul>\n<li><em>배포시점에 모든 페이지 정보들이 생성되어 별도의 앱서버가 필요 없음</em> </li>\n</ul>\n</li>\n</ol>\n<p>이 중 Gatsby는 3번 방식을 이용하여 페이지를 생성합니다.</p>\n<p><strong>GraphQL를 통해 빌드 시점에 정적 페이지를 생성하는 Gatsby JS</strong></p>\n<blockquote>\n<p>Gatsby is a React-based open source framework with performance, scalability and security built-in.</p>\n</blockquote>\n<p>즉, Gatsby는 리액트 기반의 오픈 소스 프레임워크로,<br>\ngraphQL을 통해 가져온 정보들을 HTML, CSS, React로 만들어진 컴포넌트 UI와 연결하여 사이트로 생성합니다.</p>\n<h2>How to use?</h2>\n<h3>Gatsby 설치하고 실행하기</h3>\n<ol>\n<li>Gatsby CLI 이용하기<br>\nGatsby CLI는 Webpack, Reachjs, React-route 등을 포함하고 있으므로 간단히 이용할 수 있도록 도와줍니다.<br>\n<code class=\"language-text\">npm install --global gatsby-cli</code></li>\n<li>Gatsby로 새 프로젝트 생성하기<br>\n<code class=\"language-text\">gatsby new 프로젝트명</code></li>\n<li>해당 프로젝트로 이동하기<br>\n<code class=\"language-text\">cd 프로젝트 폴더명</code></li>\n<li>Gatsby 개발모드로 시작하기<br>\n<code class=\"language-text\">gatsby develop</code></li>\n</ol>\n<h3>구조 파악하기</h3>\n<p>설치 및 개발 준비가 끝났다면 전체적인 구조를 살펴보겠습니다.</p>\n<p><strong>설정 파일</strong></p>\n<ul>\n<li>gatsby-config.js<br>\nGatsby의 기본 구성 파일로 사이트 제목, 설명, 플러그인 등 사이트 메타 데이터를 지정합니다.</li>\n<li>gatsby-browser.js<br>\nGatsby 브라우저 API를 사용할 경우 사용합니다.</li>\n<li>gatsby-node.js<br>\nGatsby 노드 API를 사용할 경우 해당하는 사용법을 정의합니다.</li>\n<li>gatsby-ssr.js<br>\nGatsby 서버 사이드 렌더링 API를 사용하는 경우 해당하는 사용법을 정의합니다.</li>\n</ul>\n<p><strong>프로젝트 구조</strong></p>\n<p>/public: gatsby build의 Output이 위치한다.</p>\n<p>/plugins: npm에 포함되지 않은 라이브러리나 플러그인을 넣는다.</p>\n<p>/src/pages: 파일 이름 및 폴더 이름을 경로로하여 따라간다.</p>\n<p>/src/components: 컴포넌트들을 모아둔 폴더</p>\n<p>/src/images: 이미지들을 모아둔 폴더</p>\n<p>/static: 저장된 파일을 Webpack에서 처리하지 않고 공용 폴더에 복사되는 폴더가 존재한다.</p>\n<h1></h1>\n<p>구조를 모두 파악했다면, 이제 블로그를 만들 수 있습니다!</p>\n<hr>\n<h1>Let’s make Blog with Gatsby</h1>\n<h2>Write Post - Markdown</h2>\n<p>Gatsby 블로그에서는 post를 markdown을 이용해 작성합니다.\nmarkdown은 사용되는 폭이 넓기때문에 재사용하기가 편리합니다.</p>\n<p>Markdown 파일을 읽어 정적 HTML로 만들기 위해서는,</p>\n<ul>\n<li>‘gatsby-source-filesystem’로 마크다운 파일 읽어들이기</li>\n<li>‘gatsby-transform-remark’로 마크다운 파일 해석하기</li>\n<li>해석한 데이터를 GraphQL로 가져오기</li>\n<li>가져온 정보를 미리 설정해둔 템플릿에 배치하기</li>\n<li>Gatsby의 createPageAPI를 이용해 정적페이지 만들기</li>\n</ul>\n<p>의 절차를 거칩니다.</p>\n<h3>세팅하기</h3>\n<p>해당 절차 중 <code class=\"language-text\">&#39;gatsby-source-filesystem&#39;</code>와 <code class=\"language-text\">&#39;gatsby-transform-remark&#39;</code>는 gatsby 플러그인으로써 gatsby-config.js에 세팅해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/gatsby-config.js\n\nplugins: [\n {\n resolve: `gatsby-source-filesystem`,\n options: {\n name: `markdown-pages`,\n path: `${__dirname}/src/마크다운 파일의 폴더`,\n   },\n },\n `gatsby-transformer-remark`,\n]</code></pre></div>\n<h3>템플릿을 이용하여 마크다운을 HTML로 변경하기</h3>\n<p>GraphQL을 이용해 가져온 마크다운 데이터 정보를 템플릿을 통해 HTML파일로 재정의하도록 도와줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/gatsby-config.js\nimport React from &quot;react&quot;\nimport { graphql } from &quot;gatsby&quot;\n\nexport default function Template({data}) {\n  const { markdownRemark: { frontmatter, html } } = data;\n  return (\n    &lt;div&gt;\n        &lt;h1&gt;{frontmatter.title}&lt;/h1&gt;\n        &lt;h2&gt;{frontmatter.date}&lt;/h2&gt;\n        &lt;div\n          dangerouslySetInnerHTML={{ __html: html }}\n        /&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: &quot;YYYY년 MM월 DD일 &quot;)\n        path\n        title\n      }\n    }\n  }\n`</code></pre></div>\n<h3>템플릿을 정적 HTML로 만들기</h3>\n<p>Node.js API를 이용하여 정적페이지를 만들기때문에 gatsby-node.js에 세팅이 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const path = require(&quot;path&quot;)\n\nexports.createPages = ({ actions, graphql }) =&gt; {\n  const { createPage } = actions\n\n  const blogPostTemplate = path.resolve(`템플릿 파일`)\n\n  return graphql(`\n    {\n      allMarkdownRemark(\n        sort: { order: DESC, fields: [frontmatter___date] }\n        limit: 1000\n      ) {\n        edges {\n          node {\n            frontmatter {\n              path\n            }\n          }\n        }\n      }\n    }\n  `).then(result =&gt; {\n    if (result.errors) {\n      return Promise.reject(result.errors)\n    }\n\n    result.data.allMarkdownRemark.edges.forEach(({ node }) =&gt; {\n      createPage({\n        path: node.frontmatter.path,\n        component: blogPostTemplate,\n        context: {},\n      })\n    })\n  })\n}</code></pre></div>\n<p>GraphQL의 allMarkdownRemark가 모든 마크다운을 읽어오면 edges 각각의 node( markdown ) 정보가 들어에가고 이를 createPage에서 템플릿과 합성하여 실제 정적 파일을 생성합니다.</p>\n<blockquote>\n<p>result.data.allMarkdownRemark.edges.forEach(({ node })</p>\n</blockquote>\n<h3>frontmatter로 전해지는 정보</h3>\n<p>그렇다면 frontmatter로 전해지는 정보는 어떻게 전달되는걸까?<br>\n바로 각 Markdown post 상단에 GraphQL이 인식할 수 있는 형식으로 정보를 작성하면됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\npath: &quot;url&quot;\ndate: &quot;생성 일자&quot;\ntitle: &quot;타이틀 정보&quot;\n---</code></pre></div>\n<p>정보는 ---로 감싸도록하고 path정보를 꼭 작성해야합니다.</p>\n<hr>\n<p><em>이제 모든 블로그 작성 준비가 끝났습니다.</em></p>\n<p>이렇게 알아본 방법으로 여러분도 gatsby를 이용해 자신만의 독창적인 블로그를 만들 수 있습니다!</p>\n<h1></h1>\n<h1></h1>\n<h1></h1>\n<hr>\n<h6>참조 사이트: 박성룡, “gatsby”, <a href=\"https://pks2974.medium.com/gatsby-%EB%A1%9C-blog-%EB%A7%8C%EB%93%A4%EA%B8%B0-ac3eed48e068\">https://pks2974.medium.com/gatsby-%EB%A1%9C-blog-%EB%A7%8C%EB%93%A4%EA%B8%B0-ac3eed48e068</a>, (2021.01.27)</h6>\n<h1></h1>","frontmatter":{"title":"GATSBY: OUR BLOG","date":"January 27, 2021","description":"project with SpringBoot","writeAuthor":"semin","profile":null}}},"pageContext":{"slug":"/introduceGatsby/","previous":{"fields":{"slug":"/readability-feature-post/"},"frontmatter":{"title":"Gradle? 멀티 모듈!"}},"next":null}},"staticQueryHashes":["1246554614","2841359383","4165419456"]}